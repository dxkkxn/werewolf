image: node:lts
stages:
  - lint
  - test
  - deploy

test-backend:
  stage: test
  script:
    - cd backendsqlite
    - npm install && npm fund
    - npm run test > api_report.txt
  artifacts:
    when: always
    paths:
      - api_report.txt

lint-js:                # Vérification de la qualité du code javascript
  stage: lint           # Dans l'étape lint (s'exécutera en parallèle de lint-html-css)
  tags:
    - docker
  script:
    - cd backendsqlite
    - npm install eslint
    - npm init @eslint/config -- --config semistandard
    - npx eslint -c package.json $(find -name "*.js")  > lint_es_report.txt || true # make the process always succeed
    - cd ../LoupGarouWeb
    - npm install eslint
    - npm init @eslint/config -- --config semistandard
    - npx eslint -c package.json $(find -name "*.js")  >> lint_es_report.txt || true # make the process always succeed
  artifacts:            # Le rapport sera disponible pour d'autres jobs
    when: always # sinon, le rapport n'est disponible qu'en cas de succès
    paths:
      - lint_es_report.txt

#jobcypress:
#  stage: test
#  tags:
#    - docker  # Comme on utilise une image pour isoler on doit utiliser un runner docker
#  image: cypress/base:16.18.1 # Image fournie par cypress avec ce qu'il faut
#  script:
#    - cd backendsqlite
#    - npm i # Installe ce qui est décrit dans package.json
#    - npm run updatedb
#    - npm run startdev & # Lance le serveur
#    - npx cypress run # Lance les tests
#    - kill -9 $(ps | grep node | awk '{print $1}') # Cette ligne pourrait permettre de tuer serve
#  when: always
#
#pages:
#  stage: deploy
#  needs:
#    - lint-html
#    - lint-css
#    - lint-js
#    - test-api
#    - jobcypress
#  script:
#    - mkdir -p public       # Création du répertoire public
#    - cp ./backendsqlite/src/frontend/* public/
#  artifacts:
#    paths:
#      - public
#  only:
#    refs:
#      - main
#
# Job pour exposer l'API sur Scalingo
# URL d'exposition de l'API : https://ensi-werewolf.osc-fr1.scalingo.io
scalingo:
  stage: deploy
  tags:
    - docker
  variables:
    # SCALINGO_API_TOKEN # variable à ne pas définir en clair ici (cf instructions à la fin du .gitlab-ci.yml ci-dessous)
    SCALINGO_APP_NAME: ensi-werewolf # le nom de votre appli chez scalingo
    SCALINGO_REGION: osc-fr1 # l'instance de scalingo sur laquelle votre appli est déployée
    GIT_DEPTH: 0
    PROJECT_DIR: backendsqlite # Le répertoire dans le dépôt où est le backend
  image: ruby:3.1.3 # car dpl est codé en Ruby
  script:
    - gem install dpl --pre # gem est le gestionnaire de paquets pour Ruby
    - curl -O https://cli-dl.scalingo.com/install && bash install # scalingo CLI est installé
    - scalingo --app=$SCALINGO_APP_NAME env-set PROJECT_DIR=$PROJECT_DIR # Pour indiquer sur le dépôt distant où est le backend (s'il est à la racine du projet ceci est facultatif, et il est possible de le faire une fois pour toute directement dans l'interface web de scalingo)
    - dpl --provider=scalingo --app=$SCALINGO_APP_NAME --api-token=$SCALINGO_API_TOKEN --region=$SCALINGO_REGION --branch=refs/heads/main
    # la variable SCALINGO_API_TOKEN contient le token que vous avez généré chez scalingo via le menu `User Settings > API tokens`
    #
    # Afin que la variable SCALINGO_API_TOKEN n'apparaissent pas en clair sur notre dépôt public gitlab, on définit cette variable via
    # le menu `Settings > CI/CD > Variables` et on la masque dans le résultat des logs des jobs en lui appliquant la propriété "Masked"
    # Plus de détails sur https://docs.gitlab.com/ee/ci/variables/index.html.     - main
#
#badges:
#  stage: deploy
#  image: python
#  script:
#    - pip install anybadge
#    - ./gen_badges.sh # Script de génération des badges
#  dependencies:         # Les badges sont générés à partir des rapports s'ils sont disponibles
#    - lint-html
#      #- lint-css
#    - lint-js
#    - test-api
#  artifacts:
#    paths:
#      - lint_html.svg  # Ces fichiers sont générés par le script genereBadges.sh
#      - lint_css.svg  # Ces fichiers sont générés par le script genereBadges.sh
#      - lint_es.svg  # Ces fichiers sont générés par le script genereBadges.sh
#  when: always          # Et quoiqu'il arrive la génération des badges devra se faire.
#                        # Le script de génération de badge doit tenir compte du fait de disposer ou non des rapports
